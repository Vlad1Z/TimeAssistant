from telebot import types
from datetime import datetime
from db import save_appointment, update_appointment, get_user_data_by_record_id
from config import id_chat_owner


class BookingHandler:
    def __init__(self, bot, start_handler):
        self.bot = bot
        self.start_handler = start_handler  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ start_handler
        self.selected_date = None
        self.selected_time = None
        self.comments = None

    def start_admin_booking(self, call, record_id):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞."""
        self.current_record_id = record_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π ID –∑–∞–ø–∏—Å–∏

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        bot_message = self.bot.send_message(
            call.message.chat.id,
            "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì):",
            reply_markup=types.ForceReply(selective=True)  # ForceReply –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—Å—Ç–∞
        )
        self.last_bot_message_id = bot_message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        self.bot.register_next_step_handler(bot_message, self.process_admin_date)

    def process_admin_date(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
        try:
            self.selected_date = datetime.strptime(message.text, '%d.%m.%y').date()
            if self.selected_date < datetime.today().date():
                raise ValueError("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.")

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç)
            self.bot.delete_message(message.chat.id, message.message_id)
            if hasattr(self, 'last_bot_message_id') and self.last_bot_message_id:
                self.bot.delete_message(message.chat.id, self.last_bot_message_id)

            # –ó–∞–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            bot_message = self.bot.send_message(
                message.chat.id,
                "‚è∞ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):",
                reply_markup=types.ForceReply(selective=True)
            )
            self.last_bot_message_id = bot_message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            self.bot.register_next_step_handler(bot_message, self.process_admin_time)
        except ValueError:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
            self.bot.delete_message(message.chat.id, message.message_id)
            if hasattr(self, 'last_bot_message_id') and self.last_bot_message_id:
                self.bot.delete_message(message.chat.id, self.last_bot_message_id)

            bot_message = self.bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì):",
                reply_markup=types.ForceReply(selective=True)
            )
            self.last_bot_message_id = bot_message.message_id
            self.bot.register_next_step_handler(bot_message, self.process_admin_date)

    def process_admin_time(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
        try:
            self.selected_time = message.text
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú
            self.selected_time = datetime.strptime(self.selected_time, '%H:%M').strftime('%H:%M')

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç)
            self.bot.delete_message(message.chat.id, message.message_id)
            if hasattr(self, 'last_bot_message_id') and self.last_bot_message_id:
                self.bot.delete_message(message.chat.id, self.last_bot_message_id)

            # –ó–∞–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            bot_message = self.bot.send_message(
                message.chat.id,
                "üí¨ –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:",
                reply_markup=types.ForceReply(selective=True)
            )
            self.last_bot_message_id = bot_message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            self.bot.register_next_step_handler(bot_message, self.process_admin_comment)
        except ValueError:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
            self.bot.delete_message(message.chat.id, message.message_id)
            if hasattr(self, 'last_bot_message_id') and self.last_bot_message_id:
                self.bot.delete_message(message.chat.id, self.last_bot_message_id)

            bot_message = self.bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):",
                reply_markup=types.ForceReply(selective=True)
            )
            self.last_bot_message_id = bot_message.message_id
            self.bot.register_next_step_handler(bot_message, self.process_admin_time)

    def process_admin_comment(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
        self.comments = message.text

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç)
        self.bot.delete_message(message.chat.id, message.message_id)
        if hasattr(self, 'last_bot_message_id') and self.last_bot_message_id:
            self.bot.delete_message(message.chat.id, self.last_bot_message_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        user_data = get_user_data_by_record_id(self.current_record_id)

        if not user_data:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        confirmation_message = (
            f"üì© –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å (–ó–∞—è–≤–∫–∞ ‚Ññ{self.current_record_id}):\n\n"
            f"üë§ –ò–º—è: {user_data['first_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} {user_data['last_name'] or ''}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone_number'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìß Username: @{user_data['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üÜî ID –∫–ª–∏–µ–Ω—Ç–∞: <code>{user_data['telegram_user_id']}</code>\n\n"
            f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:\n"
            f"üìÖ –î–∞—Ç–∞: {self.selected_date.strftime('%d.%m.%y')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {self.selected_time}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {self.comments}\n\n"
            "‚úÖ –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –∏–ª–∏ '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', —á—Ç–æ–±—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è."
        )

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_booking"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking")
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        sent_message = self.bot.send_message(
            message.chat.id,
            confirmation_message,
            reply_markup=markup,
            parse_mode="HTML"  # –£–∫–∞–∑—ã–≤–∞–µ–º HTML –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–≥–∞ <code>
        )

        self.last_bot_message_id = sent_message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

