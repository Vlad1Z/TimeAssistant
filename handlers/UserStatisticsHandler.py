from telebot import types
from db import get_unique_users, get_repeat_visits, get_inactive_users


class UserStatisticsHandler:
    def __init__(self, bot):
        self.bot = bot

    def show_statistics(self, message):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        unique_users = get_unique_users()
        repeat_visits = get_repeat_visits()
        inactive_users = get_inactive_users()

        unique_count = len(unique_users) if unique_users else 0
        repeat_count = repeat_visits or 0
        inactive_count = len(inactive_users) if inactive_users else 0

        statistics_message = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π:</b>\n\n"
            f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {unique_count} [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]\n"
            f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏—è: {repeat_count} [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]\n"
            f"üì≠ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {inactive_count} [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]\n"
        )

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="unique_users"))
        markup.add(types.InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏—è", callback_data="repeat_visits"))
        markup.add(types.InlineKeyboardButton("üì≠ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="inactive_users"))

        self.bot.send_message(
            message.chat.id,
            statistics_message,
            reply_markup=markup,
            parse_mode="HTML"
        )

    def handle_detailed_statistics(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        if call.data == "unique_users":
            result = get_unique_users()
            if result:
                detail_message = "üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n" + "\n".join(
                    [
                        f"üë§ <b>{user['first_name']} {user['last_name'] or ''}</b> "
                        f"(ID: <code>{user['telegram_user_id']}</code>) "
                        f"{'@' + user['username'] if user['username'] else ''}"
                        for user in result
                    ]
                )
            else:
                detail_message = "‚ùå –ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

        elif call.data == "repeat_visits":
            repeat_count = get_repeat_visits()
            detail_message = (
                f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è–º–∏: {repeat_count}\n\n"
                "‚ùó –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
            )

        elif call.data == "inactive_users":
            result = get_inactive_users()
            if result:
                detail_message = "üì≠ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n" + "\n".join(
                    [
                        f"üë§ <b>{user['first_name']} {user['last_name'] or ''}</b> "
                        f"(ID: <code>{user['telegram_user_id']}</code>) "
                        f"{'@' + user['username'] if user['username'] else ''}"
                        for user in result
                    ]
                )
            else:
                detail_message = "‚ùå –ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

        elif call.data == "back_to_menu":
            # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            from handlers.StartHandler import StartHandler
            start_handler = StartHandler(self.bot)
            start_handler.main_menu(call.message)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.bot.send_message(
            call.message.chat.id,
            detail_message,
            parse_mode="HTML"
        )
