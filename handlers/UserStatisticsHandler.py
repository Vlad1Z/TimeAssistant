from telebot import types
from db import get_unique_users, get_repeat_visits, get_inactive_users


class UserStatisticsHandler:
    def __init__(self, bot):
        self.bot = bot

    def show_statistics(self, message):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
        statistics = self.generate_statistics()

        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="unique_users"))
        markup.add(types.InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏—è", callback_data="repeat_visits"))
        markup.add(types.InlineKeyboardButton("üì≠ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="inactive_users"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        self.bot.send_message(
            message.chat.id,
            statistics,
            reply_markup=markup,
            parse_mode="HTML"
        )

    def generate_statistics(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        return (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π:</b>\n\n"
            f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: [–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É]\n"
            f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏—è: [–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É]\n"
            f"üì≠ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: [–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É]\n"
        )

    def handle_detailed_statistics(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
        if call.data == "unique_users":
            result = get_unique_users()
            if result:
                detail_message = "üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(
                    [f"üë§ <b>{user['first_name']} {user['last_name'] or ''}</b> "
                     f"(ID: <code>{user['telegram_user_id']}</code>)"
                     for user in result]
                )
            else:
                detail_message = "‚ùå –ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

        elif call.data == "repeat_visits":
            result = get_repeat_visits()
            if result:
                detail_message = "üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏—è:\n" + "\n".join(
                    [f"üë§ <b>{user['first_name']} {user['last_name'] or ''}</b> "
                     f"(ID: <code>{user['telegram_user_id']}</code>)"
                     for user in result]
                )
            else:
                detail_message = "‚ùå –ù–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π."

        elif call.data == "inactive_users":
            result = get_inactive_users()
            if result:
                detail_message = "üì≠ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–±–æ–ª—å—à–µ 30 –¥–Ω–µ–π):\n" + "\n".join(
                    [f"üë§ <b>{user['first_name']} {user['last_name'] or ''}</b> "
                     f"(ID: <code>{user['telegram_user_id']}</code>)"
                     for user in result]
                )
            else:
                detail_message = "‚ùå –ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        self.bot.send_message(
            call.message.chat.id,
            detail_message,
            parse_mode="HTML"
        )
