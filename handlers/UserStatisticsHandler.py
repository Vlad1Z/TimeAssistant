from telebot import types
from datetime import datetime, timedelta
from db import get_users_by_date_range, get_repeat_visits, get_inactive_users

class BaseStatisticsHandler:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã –∏ –ª–æ–≥–∏–∫—É –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    def __init__(self, bot):
        self.bot = bot
        self.pending_section = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    def show_statistics(self, message):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        - –í—ã–≤–æ–¥–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏—è, –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ—Å–µ—â—ë–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã.
        - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞.
        """
        statistics_message = (
            "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>\n\n"
            "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—ã –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
        )

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="unique_users"))
        markup.add(types.InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏—è", callback_data="repeat_visits"))
        markup.add(types.InlineKeyboardButton("üì≠ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="inactive_users"))
        markup.add(types.InlineKeyboardButton("üìä –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã", callback_data="section_stats"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))

        self.bot.send_message(
            message.chat.id,
            statistics_message,
            reply_markup=markup,
            parse_mode="HTML"
        )

    def handle_back_to_menu(self, call):
        from handlers.StartHandler import StartHandler
        start_handler = StartHandler(self.bot)
        start_handler.main_menu(call.message)


class UniqueUsersStatisticsHandler(BaseStatisticsHandler):
    def handle_statistics(self, call):
        self.request_date_range_unique_user(call)  # –î–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ –¥–∞—Ç

    def request_date_range_unique_user(self, call):
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç.
        - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: –∑–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é, –¥–≤–µ –Ω–µ–¥–µ–ª–∏, –º–µ—Å—è—Ü –∏–ª–∏ –≤—Å—ë –≤—Ä–µ–º—è.
        """
        today = datetime.now().date()
        week_ago = today - timedelta(days=7)
        two_weeks_ago = today - timedelta(days=14)
        month_ago = today - timedelta(days=30)
        all_time = "01.01.2000"

        message_text = (
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–î–î.–ú–ú.–ì–ì –î–î.–ú–ú.–ì–ì</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            f"üëâ –ó–∞ –¥–µ–Ω—å: <code>{today.strftime('%d.%m.%Y')} {today.strftime('%d.%m.%Y')}</code>\n"
            f"üëâ –ó–∞ –Ω–µ–¥–µ–ª—é: <code>{week_ago.strftime('%d.%m.%Y')} {today.strftime('%d.%m.%Y')}</code>\n"
            f"üëâ –ó–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏: <code>{two_weeks_ago.strftime('%d.%m.%Y')} {today.strftime('%d.%m.%Y')}</code>\n"
            f"üëâ –ó–∞ –º–µ—Å—è—Ü: <code>{month_ago.strftime('%d.%m.%Y')} {today.strftime('%d.%m.%Y')}</code>\n"
            f"üëâ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: <code>{all_time} {today.strftime('%d.%m.%Y')}</code>\n"
        )

        self.bot.send_message(
            call.message.chat.id,
            message_text,
            parse_mode="HTML"
        )

    def process_date_input_unique_users(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        try:
            dates = message.text.split()
            if len(dates) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

            start_date = datetime.strptime(dates[0], '%d.%m.%Y').date()
            end_date = datetime.strptime(dates[1], '%d.%m.%Y').date()

            if start_date > end_date:
                raise ValueError("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.generate_statistics_unique_users(message.chat.id, start_date, end_date)

        except ValueError as e:
            self.bot.send_message(
                message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ü—Ä–∏–º–µ—Ä: <code>01.01.2025 15.01.2025</code>",
                parse_mode="HTML"
            )

    def generate_statistics_unique_users(self, chat_id, start_date, end_date):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
        - –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã —á–µ—Ä–µ–∑ get_users_by_date_range.
        - –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è.
        - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–ª–∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
        """
        stats = get_users_by_date_range(start_date, end_date, unique=True)

        if stats:
            readable_stats = "\n\n".join([
                f"üë§ –ò–º—è: {user['first_name']} {user['last_name'] or ''}\n"
                f"üìß Username: @{user['username'] if user['username'] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üÜî ID: <code>{user['telegram_user_id']}</code>\n"
                f"üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {user['visit_date']}"
                for user in stats
            ])
            self.bot.send_message(
                chat_id,
                f"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}:\n\n"
                f"{readable_stats}",
                parse_mode="HTML"
            )
        else:
            self.bot.send_message(
                chat_id,
                f"‚ùå –î–∞–Ω–Ω—ã—Ö –æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')} –Ω–µ—Ç.",
                parse_mode="HTML"
            )


class RepeatVisitsStatisticsHandler(BaseStatisticsHandler):
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è–º–∏.
    –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π.
    """

    def handle_statistics(self, call):
        self.generate_statistics_repeat_visits(call.message.chat.id)  # –ù–µ —Ç—Ä–µ–±—É–µ—Ç –≤–≤–æ–¥–∞ –¥–∞—Ç

    def generate_statistics_repeat_visits(self, chat_id):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π.
        - –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞—Ö–æ–¥–∏–ª–∏ –≤ –±–æ—Ç–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑).
        """
        stats = get_repeat_visits()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π

        if isinstance(stats, int):  # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–æ—Å—å —á–∏—Å–ª–æ –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞
            self.bot.send_message(
                chat_id,
                f"üìä –ü–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π: {stats}",
                parse_mode="HTML"
            )
            return

        if stats:
            readable_stats = "\n\n".join([
                f"üë§ –ò–º—è: {user['first_name']} {user['last_name'] or ''}\n"
                f"üìß Username: @{user['username'] if user['username'] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üÜî ID: <code>{user['telegram_user_id']}</code>\n"
                f"üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {user['visit_date']}"
                for user in stats
            ])
            self.bot.send_message(
                chat_id,
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π:\n\n{readable_stats}",
                parse_mode="HTML"
            )
        else:
            self.bot.send_message(
                chat_id,
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö.",
                parse_mode="HTML"
            )

class InactiveUsersStatisticsHandler(BaseStatisticsHandler):
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    def handle_statistics(self, call):
        self.request_date_range_inactive_users(call)  # –î–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ –¥–∞—Ç

    def request_date_range_inactive_users(self, call):
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞.
        """
        today = datetime.now().date()
        week_ago = today - timedelta(days=7)
        two_weeks_ago = today - timedelta(days=14)
        month_ago = today - timedelta(days=30)
        two_months_ago = today - timedelta(days=60)

        message_text = (
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–î–î.–ú–ú.–ì–ì –î–î.–ú–ú.–ì–ì</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            f"üëâ –ó–∞ –Ω–µ–¥–µ–ª—é: <code>{week_ago.strftime('%d.%m.%Y')} {today.strftime('%d.%m.%Y')}</code>\n"
            f"üëâ –ó–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏: <code>{two_weeks_ago.strftime('%d.%m.%Y')} {today.strftime('%d.%m.%Y')}</code>\n"
            f"üëâ –ó–∞ –º–µ—Å—è—Ü: <code>{month_ago.strftime('%d.%m.%Y')} {today.strftime('%d.%m.%Y')}</code>\n"
            f"üëâ –ó–∞ –¥–≤–∞ –º–µ—Å—è—Ü–∞: <code>{two_months_ago.strftime('%d.%m.%Y')} {today.strftime('%d.%m.%Y')}</code>\n"
        )

        self.bot.send_message(
            call.message.chat.id,
            message_text,
            parse_mode="HTML"
        )

    def process_date_input_inactive_users(self, message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        """
        try:
            dates = message.text.split()
            if len(dates) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

            start_date = datetime.strptime(dates[0], '%d.%m.%Y').date()
            end_date = datetime.strptime(dates[1], '%d.%m.%Y').date()

            if start_date > end_date:
                raise ValueError("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π")

            self.generate_statistics_inactive_users(message.chat.id, start_date, end_date)

        except ValueError as e:
            self.bot.send_message(
                message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ü—Ä–∏–º–µ—Ä: <code>29.12.2024 05.01.2025</code>",
                parse_mode="HTML"
            )

    def generate_statistics_inactive_users(self, chat_id, start_date, end_date):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
        """
        stats = get_inactive_users(start_date, end_date)

        if stats:
            readable_stats = "\n\n".join([
                f"üë§ –ò–º—è: {user['first_name']} {user['last_name'] or ''}\n"
                f"üìß Username: @{user['username'] if user['username'] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üÜî ID: <code>{user['telegram_user_id']}</code>\n"
                f"üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {user['visit_date']}"
                for user in stats
            ])
            self.bot.send_message(
                chat_id,
                f"üìä –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}:\n\n"
                f"{readable_stats}",
                parse_mode="HTML"
            )
        else:
            self.bot.send_message(
                chat_id,
                f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}.",
                parse_mode="HTML"
            )


class VisitedSectionsStatisticsHandler(BaseStatisticsHandler):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –±–æ—Ç–∞.
    –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—Å–µ—â—ë–Ω–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º.
    """


