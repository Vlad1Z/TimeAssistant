from telebot import types
from datetime import datetime, timedelta
from db import get_users_by_date_range


class UserStatisticsHandler:
    def __init__(self, bot):
        self.bot = bot
        self.pending_section = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    def show_statistics(self, message):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        statistics_message = (
            "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>\n\n"
            "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—ã –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
        )

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="unique_users"))
        markup.add(types.InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏—è", callback_data="repeat_visits"))
        markup.add(types.InlineKeyboardButton("üì≠ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="inactive_users"))
        markup.add(types.InlineKeyboardButton("üìä –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã", callback_data="section_stats"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))

        self.bot.send_message(
            message.chat.id,
            statistics_message,
            reply_markup=markup,
            parse_mode="HTML"
        )

    def handle_detailed_statistics(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        if call.data in ["unique_users", "repeat_visits", "inactive_users"]:
            self.pending_section[call.message.chat.id] = call.data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª
            self.request_date_range(call)
        elif call.data == "section_stats":
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
            self.bot.send_message(
                call.message.chat.id,
                "üìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.",
                parse_mode="HTML"
            )
        elif call.data == "back_to_menu":
            # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            from handlers.StartHandler import StartHandler
            start_handler = StartHandler(self.bot)
            start_handler.main_menu(call.message)

    def request_date_range(self, call):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏."""
        today = datetime.now().date()
        week_ago = today - timedelta(days=7)
        two_weeks_ago = today - timedelta(days=14)
        month_ago = today - timedelta(days=30)
        all_time = "01.01.2000"

        message_text = (
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–î–î.–ú–ú.–ì–ì –î–î.–ú–ú.–ì–ì</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            f"üëâ –ó–∞ –¥–µ–Ω—å: <code>{today.strftime('%d.%m.%Y')} {today.strftime('%d.%m.%Y')}</code>\n"
            f"üëâ –ó–∞ –Ω–µ–¥–µ–ª—é: <code>{week_ago.strftime('%d.%m.%Y')} {today.strftime('%d.%m.%Y')}</code>\n"
            f"üëâ –ó–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏: <code>{two_weeks_ago.strftime('%d.%m.%Y')} {today.strftime('%d.%m.%Y')}</code>\n"
            f"üëâ –ó–∞ –º–µ—Å—è—Ü: <code>{month_ago.strftime('%d.%m.%Y')} {today.strftime('%d.%m.%Y')}</code>\n"
            f"üëâ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: <code>{all_time} {today.strftime('%d.%m.%Y')}</code>\n"
        )

        self.bot.send_message(
            call.message.chat.id,
            message_text,
            parse_mode="HTML"
        )

    def process_date_input(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        try:
            dates = message.text.split()
            if len(dates) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

            start_date = datetime.strptime(dates[0], '%d.%m.%Y').date()
            end_date = datetime.strptime(dates[1], '%d.%m.%Y').date()

            if start_date > end_date:
                raise ValueError("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π")

            section = self.pending_section.pop(message.chat.id, None)
            if not section:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

            self.generate_statistics(message.chat.id, section, start_date, end_date)

        except ValueError as e:
            self.bot.send_message(
                message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ü—Ä–∏–º–µ—Ä: <code>01.01.2025 15.01.2025</code>",
                parse_mode="HTML"
            )

    def generate_statistics(self, chat_id, section, start_date, end_date):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
        if section == "unique_users":
            stats = get_users_by_date_range(start_date, end_date, unique=True)
        elif section == "repeat_visits":
            stats = get_users_by_date_range(start_date, end_date, repeat=True)
        elif section == "inactive_users":
            stats = get_users_by_date_range(start_date, end_date, inactive=True)
        else:
            stats = get_users_by_date_range(start_date, end_date)

        if stats:
            readable_stats = "\n\n".join([
                f"üë§ –ò–º—è: {user['first_name']} {user['last_name'] or ''}\n"
                f"üìß Username: @{user['username'] if user['username'] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üÜî ID: <code>{user['telegram_user_id']}</code>\n"
                f"üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {user['visit_date']}"
                for user in stats
            ])
            self.bot.send_message(
                chat_id,
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({section}) –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}:\n\n"
                f"{readable_stats}",
                parse_mode="HTML"
            )
        else:
            self.bot.send_message(
                chat_id,
                f"‚ùå –î–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date} –Ω–µ—Ç.",
                parse_mode="HTML"
            )

