import logging
from telebot import TeleBot
import config
from handlers.StartHandler import StartHandler
from handlers.BookingHandler import BookingHandler
from handlers.UserRequestHandler import UserRequestHandler
from db import save_user_visit

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logging.info("Bot is starting...")

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –∏–∑ config.py
bot = TeleBot(config.TELEBOT_TOKEN)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ config.py
ADMIN_CHAT_ID = int(config.id_chat_owner)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
start_handler = StartHandler(bot)
booking_handler = BookingHandler(bot, start_handler)
user_request_handler = UserRequestHandler(bot, ADMIN_CHAT_ID)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–æ—Ç–æ–º)."""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    save_user_visit(user_id, username, first_name, last_name)

    start_handler.main_menu(message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("record_"))
def handle_admin_booking(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å'."""
    try:
        record_id = int(call.data.split("_")[-1])  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –∏–∑ callback_data
        print(f"Callback data received: {call.data}, record ID: {record_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        from db import check_appointment_exists
        if not check_appointment_exists(record_id):
            bot.answer_callback_query(call.id, "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
            return

        bot.answer_callback_query(call.id, "–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞!")
        booking_handler.start_admin_booking(call, record_id)  # –ü–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ BookingHandler
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback_query: {e}")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
@bot.message_handler(func=lambda message: message.text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
def handle_booking(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞."""
    booking_handler.start_booking(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
@bot.message_handler(func=lambda message: message.text in ["‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"])
def handle_confirmation(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    booking_handler.process_action(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
@bot.message_handler(func=lambda message: message.text == "üìÖ –£–∑–Ω–∞—Ç—å –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö")
def handle_user_request(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_request_handler.start_request(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
@bot.message_handler(content_types=['contact'])
def handle_contact_message(message):
    """–ü–µ—Ä–µ–¥–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UserRequestHandler."""
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print("Contact received:", message.contact)

    # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ UserRequestHandler
    user_request_handler.handle_contact(message)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logging.error(f"Error occurred: {e}")
