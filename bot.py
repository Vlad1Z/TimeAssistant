import logging
from telebot import TeleBot
from telebot import types
import config
from handlers.StartHandler import StartHandler
from handlers.BookingHandler import BookingHandler
from handlers.UserRequestHandler import UserRequestHandler
from db import save_user_visit, get_user_data_by_record_id, save_appointment, update_appointment


# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logging.info("Bot is starting...")

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –∏–∑ config.py
bot = TeleBot(config.TELEBOT_TOKEN)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ config.py
ADMIN_CHAT_ID = int(config.id_chat_owner)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
start_handler = StartHandler(bot)
booking_handler = BookingHandler(bot, start_handler)
user_request_handler = UserRequestHandler(bot, ADMIN_CHAT_ID)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–æ—Ç–æ–º)."""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    save_user_visit(user_id, username, first_name, last_name)

    start_handler.main_menu(message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("record_"))
def handle_admin_booking(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å'."""
    try:
        record_id = int(call.data.split("_")[-1])  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –∏–∑ callback_data
        print(f"Callback data received: {call.data}, record ID: {record_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        from db import check_appointment_exists
        if not check_appointment_exists(record_id):
            bot.answer_callback_query(call.id, "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
            return

        bot.answer_callback_query(call.id, "–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞!")
        booking_handler.start_admin_booking(call, record_id)  # –ü–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ BookingHandler
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback_query: {e}")

@bot.callback_query_handler(func=lambda call: call.data in ["confirm_booking", "cancel_booking"])
def handle_booking_confirmation(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫."""
    bot.answer_callback_query(call.id)  # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

    if call.data == "confirm_booking":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        user_data = get_user_data_by_record_id(booking_handler.current_record_id)

        if not user_data:
            bot.send_message(
                call.message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            )
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            # –ü–æ–ª—É—á–∞–µ–º message_id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞—è–≤–∫–æ–π
            message_id_request = user_data.get("message_id")
            if message_id_request:
                bot.delete_message(call.message.chat.id, message_id_request)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_appointment(
            user_id=booking_handler.current_record_id,  # ID –∑–∞–ø–∏—Å–∏
            appointment_date=booking_handler.selected_date.strftime('%Y-%m-%d'),
            appointment_time=booking_handler.selected_time,
            status="–ó–∞–ø–∏—Å–∞–Ω",
            comment=booking_handler.comments
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ
        updated_message = (
            "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
            f"üë§ –ò–º—è: {user_data['first_name']} {user_data['last_name']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone_number']}\n"
            f"üìß Username: @{user_data['username']}\n"
            f"üÜî ID –∫–ª–∏–µ–Ω—Ç–∞: {user_data['telegram_user_id']}\n\n"
            f"üìÖ –î–∞—Ç–∞: {booking_handler.selected_date.strftime('%d.%m.%y')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {booking_handler.selected_time}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {booking_handler.comments}"
        )

        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å"
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                "–ù–∞–ø–∏—Å–∞—Ç—å", url=f"tg://user?id={user_data['telegram_user_id']}"
            )
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=updated_message,
            reply_markup=markup,
            parse_mode="HTML"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –∑–∞–ø–∏—Å–∏
        bot.send_message(
            user_data["telegram_user_id"],
            f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!\n\n"
            f"üìÖ –î–∞—Ç–∞: {booking_handler.selected_date.strftime('%d.%m.%y')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {booking_handler.selected_time}\n"
            f"üìç –ê–¥—Ä–µ—Å: [–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å]\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: [–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω]\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {booking_handler.comments}\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å! üòä",
            parse_mode="HTML"
        )

    elif call.data == "cancel_booking":
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.edit_message_text(
            "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )






# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
@bot.message_handler(func=lambda message: message.text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
def handle_booking(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞."""
    booking_handler.start_booking(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
@bot.message_handler(func=lambda message: message.text in ["‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"])
def handle_confirmation(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    booking_handler.process_action(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
@bot.message_handler(func=lambda message: message.text == "üìÖ –£–∑–Ω–∞—Ç—å –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö")
def handle_user_request(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_request_handler.start_request(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
@bot.message_handler(content_types=['contact'])
def handle_contact_message(message):
    """–ü–µ—Ä–µ–¥–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UserRequestHandler."""
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print("Contact received:", message.contact)

    # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ UserRequestHandler
    user_request_handler.handle_contact(message)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logging.error(f"Error occurred: {e}")
